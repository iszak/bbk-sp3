3. Examine the ControlUnit.pollSensors() method. What are its current respon- sibilities? (No need to do anything, just make sure you find all the responsibilities before you continue). Ask an instructor if you’re not sure.

- Create sensors (and setup dependencies)
- Poll sensors
- Output status


5. Investigate the pollSensors method again, as you did in the previous exercise. What are the responsibilities now?
- Poll sensors
- Output status


6. A new use case! This is no longer a alarm system for only detecting hazards, it should now also include security such as motion and heat sensors. However, these sensors don’t run on a battery so one of the Sensor interface methods is suddenly redundant for a whole set of sensors. Which method is this and what SOLID principle does this break?

The "L" in SOLID, that is Liskov substitution principle which states "objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.". This is because we can't implement the Sensor trait for a non-battery powered sensor without violating this principle as we don't follow the contract.

The "I" in SOLID, that is Interface segregation principle which states "many client-specific interfaces are better than one general-purpose interface.". This is because as we implement this trait we are forced to use a general purpose interface which includes methods we do not need or possibly even use.


10. Which SOLID principle are we maintaining/not breaking by doing this?

- The "L" in SOLID, that is Liskov substitution principle. This is because our program can replace an instance of ControlUnit with a SecurityControlUnit without altering the correctness of the program.
- The "O" in SOLID, that is "Open/closed principle" which states "software entities should be open for extension, but closed for modification.". This is because instead of modifying the ControlUnit directly we extend it and augmenting it.



13. We want to test that an alarm is raised, and also implement different alarm notification methods (For example: automatically call the fire department, call the owner’s phone, and trigger the control unit alarm siren). Plan how you can extract the announcement logic and:

a) Trigger many different announcement strategies
b) Test that the different strategies was triggered

- Create a trait called "Notification" 
- Add the method "notify" to the trait
- Possibly add location and sensor type as parameters to the Notification (although this may violate S in SOLID since the Notification will be dispatching the notification but also checking if it applies, but it's not horrible)

