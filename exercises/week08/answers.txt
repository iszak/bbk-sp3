1.
(a) Briefly describe the Strategy Design Pattern?
The strategy pattern is when you have a group of different implementations that need to be changed interchangably within that group.

(b) When is it appropriate to use the Strategy Design Pattern?
See above?
TODO


3. When is it appropriate to use the Abstract Factory design pattern?
When you want to decouple the interface to create a class from the interface of the created class such that you can easily implement a new factory or replace it and still receive back a class which conforms to your expectations (see polymorphism, liskov substitution principle)

5. “In general, the details of object construction, such as instantiating and initialising the components that comprise the object, are kept within the object, often as part of its constructor.” Comment on this statement with reference to modularity and construction bloat.
If the components that are necessary to use an object are all kept and created within the object, this may mean we're unable to substitution these dependencies which reduces the modularity of the code. On the other hand if we inject everything into the constructor as a hard dependency, this may lead to construction bloat which requires many dependencies simply to use the class - this may be a sign of bad design but it can at least be mitigated by the use of a factory. The factory will find or create the dependencies and inject them into the constructor, this means any users of the object with constructor bloat can just use the factory without worrying about how it's setup.


7. (a) What is the Facade Pattern?
The facade pattern is when you create a class which encapsulates another class but provides a higher level interface (usually simpler)

7. (b) When, and why, would you use the Facade Pattern?
To improve the API exposed by the encapsulated class, this may be to improve usability, readability or reduce dependencies


8. When should one make use of the Bridge Design Pattern?
When you want to decouple the abstraction from its implementation, this will allow the two to vary.


11. (a) What is the Composite Pattern?
The composite pattern is when you treat a single object and a collection of objects (of the same type as the single object) in the same way

11. (b) Under what conditions would you use a Composite Design Pattern?
When you want to simplify the code and you've got the same usage between a single and collection of objects.

11. (c) What are the four participants of the Composite Design Pattern?
The interface that the collection and single instance uses (component)
The implementation of the interface for the collection (composite)
The implementation of the interface for the single instance (leaf)
The client that uses the interface (client)
